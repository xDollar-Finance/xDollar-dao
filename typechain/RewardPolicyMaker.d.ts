/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardPolicyMakerInterface extends ethers.utils.Interface {
  functions: {
    "epoch_at(uint256)": FunctionFragment;
    "epoch_start_time(uint256)": FunctionFragment;
    "rate_at(uint256)": FunctionFragment;
    "current_epoch()": FunctionFragment;
    "future_epoch_time()": FunctionFragment;
    "future_epoch_rate()": FunctionFragment;
    "set_admin(address)": FunctionFragment;
    "set_rewards_at(uint256,uint256)": FunctionFragment;
    "set_rewards_starting_at(uint256,uint256[10])": FunctionFragment;
    "admin()": FunctionFragment;
    "first_epoch_time()": FunctionFragment;
    "epoch_length()": FunctionFragment;
    "rewards(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "epoch_at",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epoch_start_time",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rate_at",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "current_epoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_epoch_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_epoch_rate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "set_admin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "set_rewards_at",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_rewards_starting_at",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "first_epoch_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epoch_length",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "epoch_at", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epoch_start_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate_at", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "current_epoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_rewards_at",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_rewards_starting_at",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "first_epoch_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epoch_length",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;

  events: {
    "SetAdmin(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
}

export class RewardPolicyMaker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardPolicyMakerInterface;

  functions: {
    epoch_at(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epoch_at(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epoch_start_time(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "epoch_start_time(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rate_at(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rate_at(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    current_epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "current_epoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    future_epoch_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    future_epoch_rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "future_epoch_rate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    set_admin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set_admin(address)"(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_rewards_at(
      _epoch: BigNumberish,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set_rewards_at(uint256,uint256)"(
      _epoch: BigNumberish,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_rewards_starting_at(
      _epoch: BigNumberish,
      _rewards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set_rewards_starting_at(uint256,uint256[10])"(
      _epoch: BigNumberish,
      _rewards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    first_epoch_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    "first_epoch_time()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    epoch_length(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epoch_length()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  epoch_at(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epoch_at(uint256)"(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epoch_start_time(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "epoch_start_time(uint256)"(
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rate_at(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rate_at(uint256)"(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  current_epoch(overrides?: CallOverrides): Promise<BigNumber>;

  "current_epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

  "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  future_epoch_rate(overrides?: CallOverrides): Promise<BigNumber>;

  "future_epoch_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

  set_admin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set_admin(address)"(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_rewards_at(
    _epoch: BigNumberish,
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set_rewards_at(uint256,uint256)"(
    _epoch: BigNumberish,
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_rewards_starting_at(
    _epoch: BigNumberish,
    _rewards: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set_rewards_starting_at(uint256,uint256[10])"(
    _epoch: BigNumberish,
    _rewards: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  first_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

  "first_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

  epoch_length(overrides?: CallOverrides): Promise<BigNumber>;

  "epoch_length()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "rewards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    epoch_at(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epoch_at(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epoch_start_time(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epoch_start_time(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate_at(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rate_at(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    current_epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "current_epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_rate(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    set_admin(_admin: string, overrides?: CallOverrides): Promise<void>;

    "set_admin(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    set_rewards_at(
      _epoch: BigNumberish,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "set_rewards_at(uint256,uint256)"(
      _epoch: BigNumberish,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_rewards_starting_at(
      _epoch: BigNumberish,
      _rewards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "set_rewards_starting_at(uint256,uint256[10])"(
      _epoch: BigNumberish,
      _rewards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    first_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "first_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    epoch_length(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch_length()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    SetAdmin(admin: null): TypedEventFilter<[string], { admin: string }>;
  };

  estimateGas: {
    epoch_at(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epoch_at(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epoch_start_time(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "epoch_start_time(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate_at(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rate_at(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    current_epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "current_epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_rate(overrides?: CallOverrides): Promise<BigNumber>;

    "future_epoch_rate()"(overrides?: CallOverrides): Promise<BigNumber>;

    set_admin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set_admin(address)"(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_rewards_at(
      _epoch: BigNumberish,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set_rewards_at(uint256,uint256)"(
      _epoch: BigNumberish,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_rewards_starting_at(
      _epoch: BigNumberish,
      _rewards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set_rewards_starting_at(uint256,uint256[10])"(
      _epoch: BigNumberish,
      _rewards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    first_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    "first_epoch_time()"(overrides?: CallOverrides): Promise<BigNumber>;

    epoch_length(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch_length()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    epoch_at(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epoch_at(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epoch_start_time(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epoch_start_time(uint256)"(
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rate_at(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rate_at(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    current_epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "current_epoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_epoch_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_epoch_time()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future_epoch_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "future_epoch_rate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set_admin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set_admin(address)"(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_rewards_at(
      _epoch: BigNumberish,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set_rewards_at(uint256,uint256)"(
      _epoch: BigNumberish,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_rewards_starting_at(
      _epoch: BigNumberish,
      _rewards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set_rewards_starting_at(uint256,uint256[10])"(
      _epoch: BigNumberish,
      _rewards: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    first_epoch_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "first_epoch_time()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epoch_length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epoch_length()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
