/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MerkleVotingInterface extends ethers.utils.Interface {
  functions: {
    "againstVotes()": FunctionFragment;
    "endTime()": FunctionFragment;
    "forVotes()": FunctionFragment;
    "hasVoted(address)": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "startTime()": FunctionFragment;
    "voteAgainst(address,uint256,bytes32[])": FunctionFragment;
    "voteFor(address,uint256,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "againstVotes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "forVotes", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasVoted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteAgainst",
    values: [string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "voteFor",
    values: [string, BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "againstVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteAgainst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteFor", data: BytesLike): Result;

  events: {
    "Voted(address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export class MerkleVoting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerkleVotingInterface;

  functions: {
    againstVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    "againstVotes()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "endTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    forVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forVotes()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasVoted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "hasVoted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<[string]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteAgainst(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "voteAgainst(address,uint256,bytes32[])"(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteFor(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "voteFor(address,uint256,bytes32[])"(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  againstVotes(overrides?: CallOverrides): Promise<BigNumber>;

  "againstVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  forVotes(overrides?: CallOverrides): Promise<BigNumber>;

  "forVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

  hasVoted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "hasVoted(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  "merkleRoot()"(overrides?: CallOverrides): Promise<string>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  voteAgainst(
    _to: string,
    _weight: BigNumberish,
    _proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "voteAgainst(address,uint256,bytes32[])"(
    _to: string,
    _weight: BigNumberish,
    _proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteFor(
    _to: string,
    _weight: BigNumberish,
    _proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "voteFor(address,uint256,bytes32[])"(
    _to: string,
    _weight: BigNumberish,
    _proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    againstVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "againstVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    forVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "forVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasVoted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "hasVoted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<string>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    voteAgainst(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "voteAgainst(address,uint256,bytes32[])"(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    voteFor(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "voteFor(address,uint256,bytes32[])"(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Voted(
      to: string | null,
      weight: null,
      against: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { to: string; weight: BigNumber; against: boolean }
    >;
  };

  estimateGas: {
    againstVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "againstVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    forVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "forVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasVoted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "hasVoted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    voteAgainst(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "voteAgainst(address,uint256,bytes32[])"(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteFor(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "voteFor(address,uint256,bytes32[])"(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    againstVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "againstVotes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forVotes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasVoted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasVoted(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "merkleRoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteAgainst(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "voteAgainst(address,uint256,bytes32[])"(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteFor(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "voteFor(address,uint256,bytes32[])"(
      _to: string,
      _weight: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
